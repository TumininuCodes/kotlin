Functions are a core part of many programming languages. Simply put, a function lets you define a block of code
that performs a task. Then, whenever your app needs to execute that task, you can run the function instead of having
to copy and paste the same code everywhere

So functions in Kotlin pretty much work the same for parameters and a bunch of stuff like that

Functions can also be used to return a data type, where the data type has to be specified

Function parameters are constants by default, which means they can’t be modified

Usually you want this behavior. Ideally, a function doesn’t alter its parameters. If it did,
then you could not be sure of the parameters’ values and you might make incorrect assumptions in your code,
leading to the wrong data

Have you heard of overloading in functions, overloading and lets you define similar functions using a single name. In
Kotlin, the return type alone is not enough to distinguish two functions

The method reference operator :: can be used to return values of functions as variables

The fact that you can assign functions to variables comes in handy because it means you can pass functions to other
functions. There’s an example of this in action in Functions.kt file

Assigning functions to variables and passing functions around as arguments is one aspect of functional programming