All the variables and constants you’ve dealt with so far have had concrete values. When you had a string variable, like
var name, it had a string value associated with it, like "Joe Howard". It could have been an empty string, like "", but
nevertheless, there was a value to which you could refer. That’s one of the built-in safety features of Kotlin: If the
type says Int or String, then there’s an actual integer or string there — guaranteed

There are two different methods you can use to remove nullables:

 The first is using not-null assertion operator !!
 The second is checking if a variable is null or not before using it, using smart cast

You can't use non-null values with null values in an operation except remove the nullables using the above methods

The use of the word “assertion” and the exclamation marks !! probably conveys a sense of danger to you, and it should.
You should use not-null assertions sparingly. To see why, consider what happens when the nullable doesn’t contain a
value

The null-pointer exception occurs because the variable you want to use contains no value when you try to use it

What’s worse is that you get this exception at runtime rather than compile time

Only safe (?.) or non-null asserted (!!) calls are allowed on a nullable receiver of type String?

If a safe call is made on a value that is null, the expression stops evaluating the chain and returns null. Since the
result of a safe call can be null, expressions using safe calls on nullables return nullable types. For example,
nameLength above is of type Int? and not Int, even though the length property on a string is not-nullable. The type
of the entire expression is nullable

The safe call operator provides another way to use smart casts to work with the nonnull value inside a nullable,
via the let() function from the standard library

Have you heard of the elvis operator??? It's another handy way to get a value from a nullable. You use it when you want
to get a value out of the nullable no matter what — and in the case of null, you’ll use a default value