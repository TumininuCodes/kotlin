All the variables and constants you’ve dealt with so far have had concrete values. When you had a string variable, like
var name, it had a string value associated with it, like "Joe Howard". It could have been an empty string, like "", but
nevertheless, there was a value to which you could refer. That’s one of the built-in safety features of Kotlin: If the
type says Int or String, then there’s an actual integer or string there — guaranteed

There are two different methods you can use to remove nullables:

 The first is using not-null assertion operator !!
 The second is checking if a variable is null or not before using it, using smart cast

You can't use non-null values with null values in an operation except remove the nullables using the above methods

The use of the word “assertion” and the exclamation marks !! probably conveys a sense of danger to you, and it should.
You should use not-null assertions sparingly. To see why, consider what happens when the nullable doesn’t contain a
value

The null-pointer exception occurs because the variable you want to use contains no value when you try to use it

What’s worse is that you get this exception at runtime rather than compile time